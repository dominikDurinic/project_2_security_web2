import { useContext, useEffect, useState } from "react";
import { Footer } from "../components/Footer";
import { Header } from "../components/Header";
import "../styles/Vulnerability.css";
import data from "../../data/task.json";
import { Xss } from "../components/Xss";
import { Bac } from "../components/Bac";
import VuleContext from "../../context/VuleContext";

interface TaskData {
  id: string;
  title: string;
  srcImage: string;
  simulation: string;
  story: string;
  task: string[];
  codeExample: string[];
}

export function Vulnerability(props: { id: number }) {
  const newData: TaskData[] = JSON.parse(JSON.stringify(data));
  const [vule, setVule] = useState(false);

  const vulnerability = useContext(VuleContext);

  useEffect(() => {
    vulnerability.changeVule(vule);
    localStorage.setItem("vule", String(vule));
  }, [vule]);

  return (
    <>
      <Header selected={0} />
      <main>
        <div className="vul-div">
          <img
            src={newData[props.id - 1].srcImage}
            alt="logo-vul"
            className="vul-icon"
          />
          <h2>{newData[props.id - 1].title}</h2>
        </div>

        <div className="task-div">
          <h3>Simulacija:</h3>
          <p>{newData[props.id - 1].simulation}</p>
          <h3>Priča:</h3>
          <p>{newData[props.id - 1].story}</p>
          <h3>Zadatak:</h3>
          <div>
            {newData[props.id - 1].task.map((item, index) => (
              <div key={index}>
                {index > 0 ? (
                  <p key={index}>
                    {index}. {item}
                    {newData[props.id - 1].codeExample[index] !== "" && (
                      <span className="code-style">
                        {newData[props.id - 1].codeExample[index]}
                      </span>
                    )}
                  </p>
                ) : (
                  <p key={index}>
                    {item}
                    {newData[props.id - 1].codeExample[index] !== "" && (
                      <span className="code-style">
                        {newData[props.id - 1].codeExample[index]}
                      </span>
                    )}
                  </p>
                )}
              </div>
            ))}
          </div>
        </div>
        <div className={`task-container ${vule ? "red-border" : ""}`}>
          <div className="vule-switch-container">
            <p>
              Ranjivost aplikacije:{" "}
              <span className="bold-text">
                {vule ? "Uključena" : "Isključena"}
              </span>
            </p>
            <div className="switch-div">
              <p>Ranjivost</p>
              <div className="switch">
                <div
                  onClick={() => setVule(true)}
                  className={`switch-btn ${vule ? "sw-blu" : "sw-gray"}`}
                >
                  I
                </div>
                <div
                  onClick={() => setVule(false)}
                  className={`switch-btn ${vule ? "sw-gray" : "sw-blu"}`}
                >
                  O
                </div>
              </div>
            </div>
          </div>
          {props.id === 1 ? <Xss /> : <Bac />}
          {props.id === 1 && (
            <p>
              * Chat je samo simulacija razgovora u svrhe ispitivanja sigurnosti
              web aplikacije.
            </p>
          )}
        </div>
      </main>
      <Footer />
    </>
  );
}
